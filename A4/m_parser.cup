/* CPSC441 - Assignment 3 */
/* by Xiao Lin */
/* Reference: http://www2.cs.tum.edu/projekte/cup/examples.php */
/*	      https://github.com/moy/JFlex/tree/master/jflex/examples */

import java_cup.runtime.*;
import java.io.*;

parser code {:

  public static void main(String[] args) {
    try {
      System.out.println("Parsing ["+args[0]+"]");
      // create a buffering scanner wrapper
      Scanner lexer = new m_lexor( new java.io.FileReader(args[0]));
      // start parsing
      parser p = new parser(lexer);
      Node start = (Node) p.parse().value;
      String astString = "M_prog (\n";
      astString += start.toString();
      astString += ")\n";

      System.out.println(astString);
    }
    catch (Exception e) {
		e.printStackTrace();
    }
  }
:};

terminal ADD, SUB, MUL, DIV;
terminal AND, OR, NOT;
terminal EQUAL, LT, GT, LE, GE;
terminal ASSIGN;
terminal LPAR, RPAR, CLPAR, CRPAR, SLPAR, SRPAR;
terminal COLON, SEMICLON, COMMA;
terminal IF, THEN, WHILE, DO, READ, ELSE, BEGIN, END, PRINT;
terminal INT, BOOL, REAL, VAR, SIZE, FLOAT, FLOOR, CEIL;
terminal FUN, RETURN;
terminal ID, RVAL, IVAL, BVAL;

/* program */
non terminal Node prog, block;
/* declarations */
non terminal Node declarations, declaration, var_declaration;
non terminal Node array_dimensions, type;
/* functions */
non terminal Node fun_declaration, fun_block;
non terminal Node param_list, parameters, more_parameters, basic_declaration, basic_array_dimensions;
/* M statements */
non terminal Node program_body, fun_body;
non terminal Node prog_stmts, prog_stmt;
/* expression */
non terminal Node identifier, expr, bint_term, bint_factor;
non terminal Node compare_op, int_expr, addop, int_term, mulop, int_factor;
/* modifier */
non terminal Node modifier_list;
non terminal Node arguments, more_arguments;

start with prog;


/* program */

prog		::= block:b									{: RESULT = new Node(b); :}
	;
block		::= declarations:d program_body:p						{: RESULT = new Node(d, p); RESULT.name = "M_block";  :}
	;

/* declarations */

declarations	::= declaration:d1 SEMICLON:s declarations:d2					{: RESULT = new Node(d1, d2); RESULT.name = "M_decls";:}
		|										{: RESULT = new Node(); :}
	;
declaration	::= var_declaration:v								{: RESULT = new Node(v); RESULT.name = "M_var_decl"; :}
		| fun_declaration:f								{: RESULT = new Node(f); RESULT.name = "M_fun_decl"; :}
	;
var_declaration	::= VAR:va ID:i array_dimensions:ad COLON:c type:t						{: RESULT = new Node(i,ad, t);  RESULT.name = "M_var";:}
	;
array_dimensions ::= SLPAR:sl expr:e SRPAR:sr array_dimensions:ad				{: RESULT = new Node(e, ad);  RESULT.name = "M_array_dim"; :}
		|										{: RESULT = new Node(); :}
	;
type		::= INT:i 									{: RESULT = new Node(i);  RESULT.name = "M_int"; :}
		| REAL:r 									{: RESULT = new Node(r);  RESULT.name = "M_real"; :}
		| BOOL:b 									{: RESULT = new Node(b);  RESULT.name = "M_bool"; :}
	;
/* functions */

fun_declaration	::= FUN:f ID:id param_list:pl COLON:c type:t CLPAR:clp fun_block:fb CRPAR:crp 	{: RESULT = new Node(id, pl, t, fb); RESULT.name = "M_fun";  :}
	;
fun_block	::= declarations:d fun_body:fb							{: RESULT = new Node(d, fb); RESULT.name = "F_block"; :}
	;
param_list	::= LPAR:lp parameters:p RPAR:rp						{: RESULT = new Node(p); :}
	;
parameters	::= basic_declaration:bd more_parameters:mp					{: RESULT = new Node(bd, mp);  RESULT.name = "F_param"; :}
		|										{: RESULT = new Node(); :}
	;
more_parameters	::= COMMA:c basic_declaration:bd more_parameters:mp 				{: RESULT = new Node(bd, mp); :}
		|										{: RESULT = new Node(); :}
	;

basic_declaration ::= ID:id basic_array_dimensions:bad COLON:c type:t 				{: RESULT = new Node(id, bad, t); :}
	;
basic_array_dimensions ::= SLPAR:slp SRPAR:srp basic_array_dimensions:bad 			{: RESULT = new Node(bad);   RESULT.name = "F_param_dim"; :}
		|										{: RESULT = new Node(); :}
	;


/* M statements */

program_body	::= BEGIN:b prog_stmts:ps END:ed						{: RESULT = new Node(ps); RESULT.name = "P_body"; :}
		| prog_stmts:ps									{: RESULT = new Node(ps); RESULT.name = "P_body"; :}
	;
fun_body	::= BEGIN:b prog_stmts:ps RETURN:r expr:ep SEMICLON:s END:e			{: RESULT = new Node(ps, ep);  RESULT.name = "F_body"; :}
		| prog_stmts:ps RETURN:r expr:ep SEMICLON:s					{: RESULT = new Node(ps, ep); RESULT.name = "F_body";  :}
	;
prog_stmts	::= prog_stmt:ps SEMICLON:s prog_stmts:pss					{: RESULT = new Node(ps, pss);  RESULT.name = "P_stmts";:}
		|										{: RESULT = new Node(); :}
	;
prog_stmt	::= IF:i expr:e THEN:t prog_stmt:ps ELSE:es prog_stmt:ps2			{: RESULT = new Node(e, ps, ps2); RESULT.name = "M_cond"; :}
		| WHILE:w expr:ep DO:d prog_stmt:ps						{: RESULT = new Node(ep, ps); RESULT.name = "M_while";  :}
		| READ:r identifier:l								{: RESULT = new Node(l); RESULT.name = "M_read";  :}
		| identifier:l ASSIGN:a expr:e							{: RESULT = new Node(l, e); RESULT.name = "M_ass";  :}
		| PRINT:p expr:e								{: RESULT = new Node(e); RESULT.name = "M_print";   :}
		| CLPAR:clp block:b CRPAR:crp							{: RESULT = new Node(b);  RESULT.name = "M_stmt_block":}
	;
identifier	::= ID:i array_dimensions:ad							{: RESULT = new Node(i, ad); RESULT.name = "M_location"; :}
	;


/* Expressions */

expr		::= expr:e OR:o bint_term:bt					 	{: RESULT = new Node(e, bt); RESULT.name = "M_or";:}
		| bint_term:bt								{: RESULT = new Node(bt);  RESULT.name += "M_expr";:}
	;
bint_term	::= bint_term:bt AND:a bint_factor:bf					{: RESULT = new Node(bt, bf); RESULT.name = "M_and";:}
		| bint_factor:bf							{: RESULT = new Node(bf);   RESULT.name += "M_expr";:}
	;
bint_factor	::= NOT:n bint_factor:bf						{: RESULT = new Node(bf); RESULT.name = "M_not";:}
		| int_expr:ie compare_op:co int_expr:ie2				{: RESULT = new Node(ie, co, ie2); RESULT.name = "M_comp"; :}
		| int_expr:ie								{: RESULT = new Node(ie);   RESULT.name += "M_expr";:}
	;
compare_op	::= EQUAL:eq								{: RESULT = new Node(eq); RESULT.name = "M_eq";  :}
		| LT:lt									{: RESULT = new Node(lt); RESULT.name = "M_lt";  :}
		| GT:gt									{: RESULT = new Node(gt); RESULT.name = "M_gt";  :}
		| LE:le									{: RESULT = new Node(le); RESULT.name = "M_le";  :}
		| GE:ge									{: RESULT = new Node(ge); RESULT.name = "M_ge";  :}
	;
int_expr	::= int_expr:ie addop:a int_term:it					{: RESULT = new Node(ie, a, it);  RESULT.name = "M_addop"; :}
		| int_term:it								{: RESULT = new Node(it);   RESULT.name += "M_expr";:}
	;
addop		::= ADD:a								{: RESULT = new Node(a); RESULT.name = "M_add";   :}
		| SUB:s									{: RESULT = new Node(s);  RESULT.name = "M_sub";  :}
	;
int_term	::= int_term:it mulop:m int_factor:f					{: RESULT = new Node(it, m, f); RESULT.name = "M_mulop"; :}
		| int_factor:f								{: RESULT = new Node(f);   RESULT.name += "M_expr";:}
	;
mulop		::= MUL:m								{: RESULT = new Node(m);  RESULT.name = "M_mul";  :}
		| DIV:d									{: RESULT = new Node(d);  RESULT.name = "M_div";  :}
	;
int_factor	::= LPAR:lp expr:e RPAR:rp						{: RESULT = new Node(e);   RESULT.name += "M_expr";:}
		| SIZE:s LPAR:lp ID:i basic_array_dimensions:bad RPAR:rp		{: RESULT = new Node(i, bad);  RESULT.name = "M_size"; :}
		| FLOAT:f LPAR:lp expr:e RPAR:rp					{: RESULT = new Node(e); RESULT.name = "M_float"; :}
		| FLOOR:f LPAR:lp expr:e RPAR:rp					{: RESULT = new Node(e); RESULT.name = "M_floor";:}
		| CEIL:c LPAR:lp expr:e RPAR:rp						{: RESULT = new Node(e); RESULT.name = "M_ceil";:}
		| ID:i modifier_list:ml							{: RESULT = new Node(i, ml); RESULT.name = "M_id"; :}
		| IVAL:IVAL								{: RESULT = new Node(IVAL);  RESULT.name = "M_ival"; :}
		| RVAL:RVAL								{: RESULT = new Node(RVAL);  RESULT.name = "M_rval"; :}
		| BVAL:BVAL								{: RESULT = new Node(BVAL);  RESULT.name = "M_bval"; :}
		| SUB:s int_factor:i							{: RESULT = new Node(i); RESULT.name = "M_neg"; :}
	;

/* modifier */
modifier_list	::= LPAR:l arguments:fal RPAR:r						{: RESULT = new Node(fal); RESULT.name = "M_fn";:}
		| array_dimensions:ad							{: RESULT = new Node(ad); RESULT.name = "M_dim"; :}
	;

arguments	::= expr:e more_arguments:ma						{: RESULT = new Node(e, ma); :}
		|									{: RESULT = new Node(); :}
	;
more_arguments	::= COMMA:c expr:e more_arguments:ma					{: RESULT = new Node(e, ma); :}
		|									{: RESULT = new Node(); :}
	;


