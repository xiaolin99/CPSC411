/* The following code was generated by JFlex 1.4.3 on 03/04/15 1:17 PM */

/* CPSC441 - Assignment 4 */
/* by Xiao Lin */
/* Reference: http://jflex.de/manual.html */
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03/04/15 1:17 PM from the specification file
 * <tt>m_lexor.flex</tt>
 */
class m_lexor implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\55\1\3\1\2\1\0\1\3\1\1\16\55\4\0\1\3\1\0"+
    "\1\0\1\0\1\55\1\6\1\11\1\0\1\22\1\23\1\5\1\7"+
    "\1\31\1\10\1\56\1\4\1\57\11\54\1\21\1\30\1\17\1\16"+
    "\1\20\2\0\32\53\1\26\1\0\1\27\1\0\1\55\1\0\1\42"+
    "\1\44\1\51\1\40\1\35\1\33\1\45\1\34\1\32\2\53\1\37"+
    "\1\53\1\13\1\14\1\46\1\53\1\41\1\43\1\15\1\52\1\47"+
    "\1\36\2\53\1\50\1\24\1\12\1\25\1\0\41\55\2\0\4\55"+
    "\4\0\1\55\2\0\1\55\7\0\1\55\4\0\1\55\5\0\27\55"+
    "\1\0\37\55\1\0\u01ca\55\4\0\14\55\16\0\5\55\7\0\1\55"+
    "\1\0\1\55\21\0\165\55\1\0\2\55\2\0\4\55\10\0\1\55"+
    "\1\0\3\55\1\0\1\55\1\0\24\55\1\0\123\55\1\0\213\55"+
    "\1\0\5\55\2\0\236\55\11\0\46\55\2\0\1\55\7\0\47\55"+
    "\11\0\55\55\1\0\1\55\1\0\2\55\1\0\2\55\1\0\1\55"+
    "\10\0\33\55\5\0\3\55\15\0\4\55\7\0\1\55\4\0\13\55"+
    "\5\0\112\55\4\0\146\55\1\0\11\55\1\0\12\55\1\0\23\55"+
    "\2\0\1\55\17\0\74\55\2\0\145\55\16\0\66\55\4\0\1\55"+
    "\5\0\56\55\22\0\34\55\244\0\144\55\2\0\12\55\1\0\7\55"+
    "\1\0\7\55\1\0\3\55\1\0\10\55\2\0\2\55\2\0\26\55"+
    "\1\0\7\55\1\0\1\55\3\0\4\55\2\0\11\55\2\0\2\55"+
    "\2\0\4\55\10\0\1\55\4\0\2\55\1\0\5\55\2\0\16\55"+
    "\7\0\1\55\5\0\3\55\1\0\6\55\4\0\2\55\2\0\26\55"+
    "\1\0\7\55\1\0\2\55\1\0\2\55\1\0\2\55\2\0\1\55"+
    "\1\0\5\55\4\0\2\55\2\0\3\55\3\0\1\55\7\0\4\55"+
    "\1\0\1\55\7\0\20\55\13\0\3\55\1\0\11\55\1\0\3\55"+
    "\1\0\26\55\1\0\7\55\1\0\2\55\1\0\5\55\2\0\12\55"+
    "\1\0\3\55\1\0\3\55\2\0\1\55\17\0\4\55\2\0\12\55"+
    "\1\0\1\55\17\0\3\55\1\0\10\55\2\0\2\55\2\0\26\55"+
    "\1\0\7\55\1\0\2\55\1\0\5\55\2\0\11\55\2\0\2\55"+
    "\2\0\3\55\10\0\2\55\4\0\2\55\1\0\5\55\2\0\12\55"+
    "\1\0\1\55\20\0\2\55\1\0\6\55\3\0\3\55\1\0\4\55"+
    "\3\0\2\55\1\0\1\55\1\0\2\55\3\0\2\55\3\0\3\55"+
    "\3\0\14\55\4\0\5\55\3\0\3\55\1\0\4\55\2\0\1\55"+
    "\6\0\1\55\16\0\12\55\11\0\1\55\7\0\3\55\1\0\10\55"+
    "\1\0\3\55\1\0\27\55\1\0\12\55\1\0\5\55\3\0\10\55"+
    "\1\0\3\55\1\0\4\55\7\0\2\55\1\0\2\55\6\0\4\55"+
    "\2\0\12\55\22\0\2\55\1\0\10\55\1\0\3\55\1\0\27\55"+
    "\1\0\12\55\1\0\5\55\2\0\11\55\1\0\3\55\1\0\4\55"+
    "\7\0\2\55\7\0\1\55\1\0\4\55\2\0\12\55\1\0\2\55"+
    "\17\0\2\55\1\0\10\55\1\0\3\55\1\0\51\55\2\0\10\55"+
    "\1\0\3\55\1\0\5\55\10\0\1\55\10\0\4\55\2\0\12\55"+
    "\12\0\6\55\2\0\2\55\1\0\22\55\3\0\30\55\1\0\11\55"+
    "\1\0\1\55\2\0\7\55\3\0\1\55\4\0\6\55\1\0\1\55"+
    "\1\0\10\55\22\0\2\55\15\0\72\55\4\0\20\55\1\0\12\55"+
    "\47\0\2\55\1\0\1\55\2\0\2\55\1\0\1\55\2\0\1\55"+
    "\6\0\4\55\1\0\7\55\1\0\3\55\1\0\1\55\1\0\1\55"+
    "\2\0\2\55\1\0\15\55\1\0\3\55\2\0\5\55\1\0\1\55"+
    "\1\0\6\55\2\0\12\55\2\0\2\55\42\0\1\55\27\0\2\55"+
    "\6\0\12\55\13\0\1\55\1\0\1\55\1\0\1\55\4\0\12\55"+
    "\1\0\44\55\4\0\24\55\1\0\22\55\1\0\44\55\11\0\1\55"+
    "\71\0\112\55\6\0\116\55\2\0\46\55\12\0\53\55\1\0\1\55"+
    "\3\0\u0149\55\1\0\4\55\2\0\7\55\1\0\1\55\1\0\4\55"+
    "\2\0\51\55\1\0\4\55\2\0\41\55\1\0\4\55\2\0\7\55"+
    "\1\0\1\55\1\0\4\55\2\0\17\55\1\0\71\55\1\0\4\55"+
    "\2\0\103\55\2\0\3\55\40\0\20\55\20\0\125\55\14\0\u026c\55"+
    "\2\0\21\55\1\0\32\55\5\0\113\55\3\0\3\55\17\0\15\55"+
    "\1\0\7\55\13\0\25\55\13\0\24\55\14\0\15\55\1\0\3\55"+
    "\1\0\2\55\14\0\124\55\3\0\1\55\3\0\3\55\2\0\12\55"+
    "\41\0\3\55\2\0\12\55\6\0\130\55\10\0\53\55\5\0\106\55"+
    "\12\0\35\55\3\0\14\55\4\0\14\55\12\0\50\55\2\0\5\55"+
    "\13\0\54\55\4\0\32\55\6\0\12\55\46\0\34\55\4\0\77\55"+
    "\1\0\35\55\2\0\13\55\6\0\12\55\15\0\1\55\130\0\114\55"+
    "\4\0\12\55\21\0\11\55\14\0\53\55\3\0\14\55\6\0\64\55"+
    "\14\0\70\55\10\0\12\55\3\0\61\55\122\0\3\55\1\0\37\55"+
    "\15\0\347\55\25\0\u011a\55\2\0\6\55\2\0\46\55\2\0\6\55"+
    "\2\0\10\55\1\0\1\55\1\0\1\55\1\0\1\55\1\0\37\55"+
    "\2\0\65\55\1\0\7\55\1\0\1\55\3\0\3\55\1\0\7\55"+
    "\3\0\4\55\2\0\6\55\4\0\15\55\5\0\3\55\1\0\7\55"+
    "\16\0\5\55\32\0\5\55\20\0\2\55\23\0\1\55\13\0\5\55"+
    "\5\0\6\55\1\0\1\55\15\0\1\55\20\0\15\55\3\0\32\55"+
    "\26\0\15\55\4\0\1\55\3\0\14\55\21\0\1\55\4\0\1\55"+
    "\2\0\12\55\1\0\1\55\3\0\5\55\6\0\1\55\1\0\1\55"+
    "\1\0\1\55\1\0\4\55\1\0\13\55\2\0\4\55\5\0\5\55"+
    "\4\0\1\55\21\0\51\55\u0a77\0\57\55\1\0\57\55\1\0\205\55"+
    "\6\0\7\55\16\0\46\55\12\0\66\55\11\0\1\55\17\0\30\55"+
    "\11\0\7\55\1\0\7\55\1\0\7\55\1\0\7\55\1\0\7\55"+
    "\1\0\7\55\1\0\7\55\1\0\7\55\1\0\40\55\57\0\1\55"+
    "\u01d5\0\3\55\31\0\17\55\1\0\5\55\2\0\5\55\4\0\126\55"+
    "\2\0\2\55\2\0\3\55\1\0\132\55\1\0\4\55\5\0\51\55"+
    "\3\0\136\55\21\0\33\55\65\0\20\55\u0200\0\u19b6\55\112\0\u51cc\55"+
    "\64\0\u048d\55\103\0\56\55\2\0\u010d\55\3\0\34\55\24\0\60\55"+
    "\14\0\2\55\1\0\31\55\10\0\122\55\45\0\11\55\2\0\147\55"+
    "\2\0\4\55\1\0\2\55\16\0\12\55\120\0\56\55\20\0\1\55"+
    "\7\0\64\55\14\0\105\55\13\0\12\55\6\0\30\55\3\0\1\55"+
    "\4\0\56\55\2\0\44\55\14\0\35\55\3\0\101\55\16\0\13\55"+
    "\46\0\67\55\11\0\16\55\2\0\12\55\6\0\27\55\3\0\2\55"+
    "\4\0\103\55\30\0\3\55\43\0\6\55\2\0\6\55\2\0\6\55"+
    "\11\0\7\55\1\0\7\55\221\0\53\55\1\0\2\55\2\0\12\55"+
    "\6\0\u2ba4\55\14\0\27\55\4\0\61\55\u2104\0\u012e\55\2\0\76\55"+
    "\2\0\152\55\46\0\7\55\14\0\5\55\5\0\14\55\1\0\15\55"+
    "\1\0\5\55\1\0\1\55\1\0\2\55\1\0\2\55\1\0\154\55"+
    "\41\0\u016b\55\22\0\100\55\2\0\66\55\50\0\15\55\3\0\20\55"+
    "\20\0\7\55\14\0\2\55\30\0\3\55\31\0\1\55\6\0\5\55"+
    "\1\0\207\55\2\0\1\55\4\0\1\55\13\0\12\55\7\0\32\55"+
    "\4\0\1\55\1\0\32\55\13\0\131\55\3\0\6\55\2\0\6\55"+
    "\2\0\6\55\2\0\3\55\3\0\2\55\3\0\2\55\22\0\3\55"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\2\1\3\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\13\7\2\24"+
    "\1\2\1\0\1\25\1\26\3\7\1\27\1\30\1\31"+
    "\1\7\1\32\6\7\1\33\7\7\2\0\1\2\2\0"+
    "\1\34\2\7\1\35\2\7\1\36\1\37\10\7\1\40"+
    "\1\7\1\41\1\0\1\42\1\43\2\7\1\44\2\7"+
    "\1\45\1\46\1\47\1\50\2\7\1\51\1\52\1\53"+
    "\1\54\1\7\1\55\1\56\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\140\0\300\0\140\0\360"+
    "\0\140\0\140\0\u0120\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210"+
    "\0\140\0\u0240\0\u0270\0\140\0\140\0\140\0\140\0\140"+
    "\0\140\0\140\0\140\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360"+
    "\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0"+
    "\0\u0510\0\360\0\140\0\140\0\u0540\0\u0570\0\u05a0\0\140"+
    "\0\140\0\140\0\u05d0\0\u01b0\0\u0600\0\u0630\0\u0660\0\u0690"+
    "\0\u06c0\0\u06f0\0\u01b0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0"+
    "\0\u0810\0\u0840\0\u0870\0\u04e0\0\u08a0\0\u08d0\0\u0900\0\u01b0"+
    "\0\u0930\0\u0960\0\u01b0\0\u0990\0\u09c0\0\u01b0\0\u01b0\0\u09f0"+
    "\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u01b0"+
    "\0\u0b70\0\u0870\0\u0ba0\0\u01b0\0\u01b0\0\u0bd0\0\u0c00\0\u01b0"+
    "\0\u0c30\0\u0c60\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u0c90\0\u0cc0"+
    "\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u0cf0\0\u01b0\0\u01b0\0\u01b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\16\1\36\1\37\1\16\1\40"+
    "\1\41\1\16\1\42\1\43\1\16\1\44\1\45\1\16"+
    "\1\46\2\16\1\47\2\3\1\50\60\3\62\0\1\5"+
    "\62\0\1\51\52\0\1\52\1\4\1\5\55\52\11\0"+
    "\1\53\60\0\1\54\60\0\1\16\1\55\1\16\14\0"+
    "\24\16\1\0\1\16\13\0\3\16\14\0\24\16\1\0"+
    "\1\16\13\0\3\16\14\0\2\16\1\56\4\16\1\57"+
    "\14\16\1\0\1\16\17\0\1\60\56\0\1\61\57\0"+
    "\1\62\54\0\1\63\2\16\14\0\1\16\1\64\22\16"+
    "\1\0\1\16\13\0\3\16\14\0\5\16\1\65\2\16"+
    "\1\66\7\16\1\67\3\16\1\0\1\16\13\0\1\70"+
    "\2\16\14\0\5\16\1\71\16\16\1\0\1\16\13\0"+
    "\3\16\14\0\2\16\1\72\21\16\1\0\1\16\13\0"+
    "\1\16\1\73\1\16\14\0\24\16\1\0\1\16\13\0"+
    "\3\16\14\0\3\16\1\74\20\16\1\0\1\16\13\0"+
    "\3\16\14\0\1\75\23\16\1\0\1\16\13\0\1\16"+
    "\1\76\1\16\14\0\3\16\1\77\20\16\1\0\1\16"+
    "\13\0\3\16\14\0\7\16\1\100\14\16\1\0\1\16"+
    "\13\0\3\16\14\0\10\16\1\101\13\16\1\0\1\16"+
    "\13\0\3\16\14\0\3\16\1\102\20\16\1\0\1\16"+
    "\54\0\1\47\1\0\1\103\1\47\54\0\1\104\1\0"+
    "\1\103\1\104\4\105\1\106\1\107\52\105\13\0\2\16"+
    "\1\110\14\0\24\16\1\0\1\16\13\0\3\16\14\0"+
    "\3\16\1\111\20\16\1\0\1\16\13\0\3\16\14\0"+
    "\20\16\1\112\3\16\1\0\1\16\13\0\2\16\1\113"+
    "\14\0\24\16\1\0\1\16\13\0\1\16\1\114\1\16"+
    "\14\0\24\16\1\0\1\16\13\0\3\16\14\0\5\16"+
    "\1\115\16\16\1\0\1\16\13\0\1\116\2\16\14\0"+
    "\24\16\1\0\1\16\13\0\3\16\14\0\6\16\1\117"+
    "\15\16\1\0\1\16\13\0\3\16\14\0\11\16\1\120"+
    "\12\16\1\0\1\16\13\0\3\16\14\0\1\121\23\16"+
    "\1\0\1\16\13\0\2\16\1\122\14\0\10\16\1\123"+
    "\13\16\1\0\1\16\13\0\3\16\14\0\16\16\1\124"+
    "\5\16\1\0\1\16\13\0\1\16\1\125\1\16\14\0"+
    "\24\16\1\0\1\16\13\0\3\16\14\0\13\16\1\126"+
    "\10\16\1\0\1\16\13\0\3\16\14\0\1\127\23\16"+
    "\1\0\1\16\13\0\3\16\14\0\7\16\1\130\14\16"+
    "\1\0\1\16\13\0\3\16\14\0\1\131\23\16\1\0"+
    "\1\16\54\0\1\132\2\0\1\132\4\105\1\106\1\133"+
    "\52\105\5\106\1\133\52\106\4\0\1\5\1\107\65\0"+
    "\1\134\2\16\14\0\24\16\1\0\1\16\13\0\3\16"+
    "\14\0\3\16\1\135\20\16\1\0\1\16\13\0\1\16"+
    "\1\136\1\16\14\0\10\16\1\137\13\16\1\0\1\16"+
    "\13\0\3\16\14\0\11\16\1\112\12\16\1\0\1\16"+
    "\13\0\3\16\14\0\3\16\1\140\20\16\1\0\1\16"+
    "\13\0\3\16\14\0\5\16\1\141\16\16\1\0\1\16"+
    "\13\0\3\16\14\0\20\16\1\142\3\16\1\0\1\16"+
    "\13\0\3\16\14\0\5\16\1\143\1\144\15\16\1\0"+
    "\1\16\13\0\3\16\14\0\3\16\1\145\20\16\1\0"+
    "\1\16\13\0\3\16\14\0\5\16\1\146\16\16\1\0"+
    "\1\16\13\0\3\16\14\0\1\147\23\16\1\0\1\16"+
    "\13\0\1\150\2\16\14\0\24\16\1\0\1\16\13\0"+
    "\3\16\14\0\5\16\1\151\16\16\1\0\1\16\4\106"+
    "\1\5\1\133\52\106\13\0\3\16\14\0\7\16\1\152"+
    "\14\16\1\0\1\16\13\0\2\16\1\153\14\0\24\16"+
    "\1\0\1\16\13\0\3\16\14\0\3\16\1\154\20\16"+
    "\1\0\1\16\13\0\3\16\14\0\7\16\1\155\14\16"+
    "\1\0\1\16\13\0\1\156\2\16\14\0\24\16\1\0"+
    "\1\16\13\0\2\16\1\157\14\0\24\16\1\0\1\16"+
    "\13\0\1\160\2\16\14\0\24\16\1\0\1\16";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3360];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\1\1\2\11"+
    "\6\1\1\11\2\1\10\11\16\1\1\0\2\11\3\1"+
    "\3\11\20\1\2\0\1\1\2\0\23\1\1\0\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  /* can define helper functions here */
  StringBuffer string = new StringBuffer();
  
  boolean success = true;
	  
  private Symbol symbol(String name, int type) {
    Symbol s = new Symbol(type, yyline, yycolumn);
    s.value = name;
    return s;
  }
  private Symbol symbol(String name, int type, Object value) {
    Symbol s = new Symbol(type, yyline, yycolumn, value);
    s.value = new String(name + " " + value.toString());
    return s;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  m_lexor(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  m_lexor(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1902) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      System.out.println();

  if (!success) {System.out.println("Code contains errors. Cannot parse."); System.exit(1);}

  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { /* ignore */
          }
        case 48: break;
        case 26: 
          { return symbol("M_if", sym.IF);
          }
        case 49: break;
        case 45: 
          { return symbol("M_begin", sym.BEGIN);
          }
        case 50: break;
        case 14: 
          { return symbol("(", sym.CLPAR);
          }
        case 51: break;
        case 32: 
          { return symbol("M_var", sym.VAR);
          }
        case 52: break;
        case 30: 
          { return symbol("M_fun", sym.FUN);
          }
        case 53: break;
        case 36: 
          { return symbol("M_else", sym.ELSE);
          }
        case 54: break;
        case 43: 
          { return symbol("M_float", sym.FLOAT);
          }
        case 55: break;
        case 13: 
          { return symbol(")", sym.RPAR);
          }
        case 56: break;
        case 5: 
          { return symbol("M_add", sym.ADD);
          }
        case 57: break;
        case 34: 
          { return symbol("M_then", sym.THEN);
          }
        case 58: break;
        case 37: 
          { return symbol("M_real", sym.REAL);
          }
        case 59: break;
        case 27: 
          { return symbol("M_do", sym.DO);
          }
        case 60: break;
        case 9: 
          { return symbol("M_lt", sym.LT);
          }
        case 61: break;
        case 16: 
          { return symbol("[", sym.SLPAR);
          }
        case 62: break;
        case 4: 
          { return symbol("M_mul", sym.MUL);
          }
        case 63: break;
        case 38: 
          { return symbol("M_read", sym.READ);
          }
        case 64: break;
        case 12: 
          { return symbol("(", sym.LPAR);
          }
        case 65: break;
        case 25: 
          { return symbol("M_ass", sym.ASSIGN);
          }
        case 66: break;
        case 42: 
          { return symbol("M_floor", sym.FLOOR);
          }
        case 67: break;
        case 24: 
          { return symbol("M_ge", sym.GE);
          }
        case 68: break;
        case 46: 
          { return symbol("M_print", sym.PRINT);
          }
        case 69: break;
        case 18: 
          { return symbol(";", sym.SEMICLON);
          }
        case 70: break;
        case 3: 
          { return symbol("M_div", sym.DIV);
          }
        case 71: break;
        case 28: 
          { return symbol("M_not", sym.NOT);
          }
        case 72: break;
        case 6: 
          { return symbol("M_sub", sym.SUB);
          }
        case 73: break;
        case 8: 
          { return symbol("M_equal", sym.EQUAL);
          }
        case 74: break;
        case 40: 
          { return symbol("M_bool", sym.BOOL);
          }
        case 75: break;
        case 39: 
          { return symbol("M_size", sym.SIZE);
          }
        case 76: break;
        case 47: 
          { return symbol("M_return", sym.RETURN);
          }
        case 77: break;
        case 1: 
          { System.out.println("Illegal character <"+
                                                    yytext()+"> at line "+yyline); success = false;
          }
        case 78: break;
        case 21: 
          { return symbol("M_and", sym.AND);
          }
        case 79: break;
        case 20: 
          { return symbol("M_ival", sym.IVAL, new Integer(yytext()));
          }
        case 80: break;
        case 17: 
          { return symbol("]", sym.SRPAR);
          }
        case 81: break;
        case 29: 
          { return symbol("M_int", sym.INT);
          }
        case 82: break;
        case 35: 
          { return symbol("M_bval", sym.BVAL, new String(yytext()));
          }
        case 83: break;
        case 10: 
          { return symbol("M_gt", sym.GT);
          }
        case 84: break;
        case 44: 
          { return symbol("M_while", sym.WHILE);
          }
        case 85: break;
        case 15: 
          { return symbol(")", sym.CRPAR);
          }
        case 86: break;
        case 19: 
          { return symbol(",", sym.COMMA);
          }
        case 87: break;
        case 22: 
          { return symbol("M_or", sym.OR);
          }
        case 88: break;
        case 41: 
          { return symbol("M_ceil", sym.CEIL);
          }
        case 89: break;
        case 11: 
          { return symbol(":", sym.COLON);
          }
        case 90: break;
        case 23: 
          { return symbol("M_le", sym.LE);
          }
        case 91: break;
        case 31: 
          { return symbol("M_end", sym.END);
          }
        case 92: break;
        case 7: 
          { return symbol("", sym.ID, new String("\""+yytext()+"\""));
          }
        case 93: break;
        case 33: 
          { return symbol("M_rval", sym.RVAL, new Double(yytext()));
          }
        case 94: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java m_lexor <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        m_lexor scanner = null;
        try {
          scanner = new m_lexor( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
