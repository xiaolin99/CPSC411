/* The following code was generated by JFlex 1.4.3 on 22/01/15 9:11 AM */

/* CPSC441 - Assignment 1 */
/* by Xiao Lin */
/* Reference: http://jflex.de/manual.html */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/01/15 9:11 AM from the specification file
 * <tt>CPSC441_a1.flex</tt>
 */
class mm_lexor {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\30\1\3\1\2\1\0\1\3\1\1\16\30\4\0\1\3\3\0"+
    "\1\27\1\6\2\0\1\37\1\40\1\5\1\33\1\0\1\36\1\0"+
    "\1\4\1\31\11\32\1\34\1\41\1\0\1\35\3\0\32\27\4\0"+
    "\1\27\1\0\1\27\1\24\1\27\1\17\1\13\1\10\1\25\1\12"+
    "\1\7\2\27\1\16\1\27\1\14\1\20\1\21\1\27\1\26\1\23"+
    "\1\11\1\22\1\27\1\15\3\27\4\0\41\30\2\0\4\27\4\0"+
    "\1\27\2\0\1\30\7\0\1\27\4\0\1\27\5\0\27\27\1\0"+
    "\37\27\1\0\u01ca\27\4\0\14\27\16\0\5\27\7\0\1\27\1\0"+
    "\1\27\21\0\160\30\5\27\1\0\2\27\2\0\4\27\10\0\1\27"+
    "\1\0\3\27\1\0\1\27\1\0\24\27\1\0\123\27\1\0\213\27"+
    "\1\0\5\30\2\0\236\27\11\0\46\27\2\0\1\27\7\0\47\27"+
    "\11\0\55\30\1\0\1\30\1\0\2\30\1\0\2\30\1\0\1\30"+
    "\10\0\33\27\5\0\3\27\15\0\4\30\7\0\1\27\4\0\13\30"+
    "\5\0\53\27\37\30\4\0\2\27\1\30\143\27\1\0\1\27\10\30"+
    "\1\0\6\30\2\27\2\30\1\0\4\30\2\27\12\30\3\27\2\0"+
    "\1\27\17\0\1\30\1\27\1\30\36\27\33\30\2\0\131\27\13\30"+
    "\1\27\16\0\12\30\41\27\11\30\2\27\4\0\1\27\5\0\26\27"+
    "\4\30\1\27\11\30\1\27\3\30\1\27\5\30\22\0\31\27\3\30"+
    "\244\0\4\30\66\27\3\30\1\27\22\30\1\27\7\30\12\27\2\30"+
    "\2\0\12\30\1\0\7\27\1\0\7\27\1\0\3\30\1\0\10\27"+
    "\2\0\2\27\2\0\26\27\1\0\7\27\1\0\1\27\3\0\4\27"+
    "\2\0\1\30\1\27\7\30\2\0\2\30\2\0\3\30\1\27\10\0"+
    "\1\30\4\0\2\27\1\0\3\27\2\30\2\0\12\30\4\27\7\0"+
    "\1\27\5\0\3\30\1\0\6\27\4\0\2\27\2\0\26\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\27\1\0\2\27\2\0\1\30\1\0"+
    "\5\30\4\0\2\30\2\0\3\30\3\0\1\30\7\0\4\27\1\0"+
    "\1\27\7\0\14\30\3\27\1\30\13\0\3\30\1\0\11\27\1\0"+
    "\3\27\1\0\26\27\1\0\7\27\1\0\2\27\1\0\5\27\2\0"+
    "\1\30\1\27\10\30\1\0\3\30\1\0\3\30\2\0\1\27\17\0"+
    "\2\27\2\30\2\0\12\30\1\0\1\27\17\0\3\30\1\0\10\27"+
    "\2\0\2\27\2\0\26\27\1\0\7\27\1\0\2\27\1\0\5\27"+
    "\2\0\1\30\1\27\7\30\2\0\2\30\2\0\3\30\10\0\2\30"+
    "\4\0\2\27\1\0\3\27\2\30\2\0\12\30\1\0\1\27\20\0"+
    "\1\30\1\27\1\0\6\27\3\0\3\27\1\0\4\27\3\0\2\27"+
    "\1\0\1\27\1\0\2\27\3\0\2\27\3\0\3\27\3\0\14\27"+
    "\4\0\5\30\3\0\3\30\1\0\4\30\2\0\1\27\6\0\1\30"+
    "\16\0\12\30\11\0\1\27\7\0\3\30\1\0\10\27\1\0\3\27"+
    "\1\0\27\27\1\0\12\27\1\0\5\27\3\0\1\27\7\30\1\0"+
    "\3\30\1\0\4\30\7\0\2\30\1\0\2\27\6\0\2\27\2\30"+
    "\2\0\12\30\22\0\2\30\1\0\10\27\1\0\3\27\1\0\27\27"+
    "\1\0\12\27\1\0\5\27\2\0\1\30\1\27\7\30\1\0\3\30"+
    "\1\0\4\30\7\0\2\30\7\0\1\27\1\0\2\27\2\30\2\0"+
    "\12\30\1\0\2\27\17\0\2\30\1\0\10\27\1\0\3\27\1\0"+
    "\51\27\2\0\1\27\7\30\1\0\3\30\1\0\4\30\1\27\10\0"+
    "\1\30\10\0\2\27\2\30\2\0\12\30\12\0\6\27\2\0\2\30"+
    "\1\0\22\27\3\0\30\27\1\0\11\27\1\0\1\27\2\0\7\27"+
    "\3\0\1\30\4\0\6\30\1\0\1\30\1\0\10\30\22\0\2\30"+
    "\15\0\60\27\1\30\2\27\7\30\4\0\10\27\10\30\1\0\12\30"+
    "\47\0\2\27\1\0\1\27\2\0\2\27\1\0\1\27\2\0\1\27"+
    "\6\0\4\27\1\0\7\27\1\0\3\27\1\0\1\27\1\0\1\27"+
    "\2\0\2\27\1\0\4\27\1\30\2\27\6\30\1\0\2\30\1\27"+
    "\2\0\5\27\1\0\1\27\1\0\6\30\2\0\12\30\2\0\2\27"+
    "\42\0\1\27\27\0\2\30\6\0\12\30\13\0\1\30\1\0\1\30"+
    "\1\0\1\30\4\0\2\30\10\27\1\0\44\27\4\0\24\30\1\0"+
    "\2\30\5\27\13\30\1\0\44\30\11\0\1\30\71\0\53\27\24\30"+
    "\1\27\12\30\6\0\6\27\4\30\4\27\3\30\1\27\3\30\2\27"+
    "\7\30\3\27\4\30\15\27\14\30\1\27\17\30\2\0\46\27\12\0"+
    "\53\27\1\0\1\27\3\0\u0149\27\1\0\4\27\2\0\7\27\1\0"+
    "\1\27\1\0\4\27\2\0\51\27\1\0\4\27\2\0\41\27\1\0"+
    "\4\27\2\0\7\27\1\0\1\27\1\0\4\27\2\0\17\27\1\0"+
    "\71\27\1\0\4\27\2\0\103\27\2\0\3\30\40\0\20\27\20\0"+
    "\125\27\14\0\u026c\27\2\0\21\27\1\0\32\27\5\0\113\27\3\0"+
    "\3\27\17\0\15\27\1\0\4\27\3\30\13\0\22\27\3\30\13\0"+
    "\22\27\2\30\14\0\15\27\1\0\3\27\1\0\2\30\14\0\64\27"+
    "\40\30\3\0\1\27\3\0\2\27\1\30\2\0\12\30\41\0\3\30"+
    "\2\0\12\30\6\0\130\27\10\0\51\27\1\30\1\27\5\0\106\27"+
    "\12\0\35\27\3\0\14\30\4\0\14\30\12\0\12\30\36\27\2\0"+
    "\5\27\13\0\54\27\4\0\21\30\7\27\2\30\6\0\12\30\46\0"+
    "\27\27\5\30\4\0\65\27\12\30\1\0\35\30\2\0\13\30\6\0"+
    "\12\30\15\0\1\27\130\0\5\30\57\27\21\30\7\27\4\0\12\30"+
    "\21\0\11\30\14\0\3\30\36\27\12\30\3\0\2\27\12\30\6\0"+
    "\46\27\16\30\14\0\44\27\24\30\10\0\12\30\3\0\3\27\12\30"+
    "\44\27\122\0\3\30\1\0\25\30\4\27\1\30\4\27\1\30\15\0"+
    "\300\27\47\30\25\0\4\30\u0116\27\2\0\6\27\2\0\46\27\2\0"+
    "\6\27\2\0\10\27\1\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\37\27\2\0\65\27\1\0\7\27\1\0\1\27\3\0\3\27\1\0"+
    "\7\27\3\0\4\27\2\0\6\27\4\0\15\27\5\0\3\27\1\0"+
    "\7\27\16\0\5\30\32\0\5\30\20\0\2\27\23\0\1\27\13\0"+
    "\5\30\5\0\6\30\1\0\1\27\15\0\1\27\20\0\15\27\3\0"+
    "\32\27\26\0\15\30\4\0\1\30\3\0\14\30\21\0\1\27\4\0"+
    "\1\27\2\0\12\27\1\0\1\27\3\0\5\27\6\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\1\0\13\27\2\0\4\27\5\0"+
    "\5\27\4\0\1\27\21\0\51\27\u0a77\0\57\27\1\0\57\27\1\0"+
    "\205\27\6\0\4\27\3\30\16\0\46\27\12\0\66\27\11\0\1\27"+
    "\17\0\1\30\27\27\11\0\7\27\1\0\7\27\1\0\7\27\1\0"+
    "\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0"+
    "\40\30\57\0\1\27\u01d5\0\3\27\31\0\11\27\6\30\1\0\5\27"+
    "\2\0\5\27\4\0\126\27\2\0\2\30\2\0\3\27\1\0\132\27"+
    "\1\0\4\27\5\0\51\27\3\0\136\27\21\0\33\27\65\0\20\27"+
    "\u0200\0\u19b6\27\112\0\u51cc\27\64\0\u048d\27\103\0\56\27\2\0\u010d\27"+
    "\3\0\20\27\12\30\2\27\24\0\57\27\1\30\14\0\2\30\1\0"+
    "\31\27\10\0\120\27\2\30\45\0\11\27\2\0\147\27\2\0\4\27"+
    "\1\0\2\27\16\0\12\27\120\0\10\27\1\30\3\27\1\30\4\27"+
    "\1\30\27\27\5\30\20\0\1\27\7\0\64\27\14\0\2\30\62\27"+
    "\21\30\13\0\12\30\6\0\22\30\6\27\3\0\1\27\4\0\12\30"+
    "\34\27\10\30\2\0\27\27\15\30\14\0\35\27\3\0\4\30\57\27"+
    "\16\30\16\0\1\27\12\30\46\0\51\27\16\30\11\0\3\27\1\30"+
    "\10\27\2\30\2\0\12\30\6\0\27\27\3\0\1\27\1\30\4\0"+
    "\60\27\1\30\1\27\3\30\2\27\2\30\5\27\2\30\1\27\1\30"+
    "\1\27\30\0\3\27\43\0\6\27\2\0\6\27\2\0\6\27\11\0"+
    "\7\27\1\0\7\27\221\0\43\27\10\30\1\0\2\30\2\0\12\30"+
    "\6\0\u2ba4\27\14\0\27\27\4\0\61\27\u2104\0\u012e\27\2\0\76\27"+
    "\2\0\152\27\46\0\7\27\14\0\5\27\5\0\1\27\1\30\12\27"+
    "\1\0\15\27\1\0\5\27\1\0\1\27\1\0\2\27\1\0\2\27"+
    "\1\0\154\27\41\0\u016b\27\22\0\100\27\2\0\66\27\50\0\15\27"+
    "\3\0\20\30\20\0\7\30\14\0\2\27\30\0\3\27\31\0\1\27"+
    "\6\0\5\27\1\0\207\27\2\0\1\30\4\0\1\27\13\0\12\30"+
    "\7\0\32\27\4\0\1\27\1\0\32\27\13\0\131\27\3\0\6\27"+
    "\2\0\6\27\2\0\6\27\2\0\3\27\3\0\2\27\3\0\2\27"+
    "\22\0\3\30\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\1\7\5\2\6"+
    "\1\7\1\1\1\10\1\11\1\12\1\13\2\0\1\14"+
    "\6\5\1\15\1\5\1\16\2\0\2\5\1\17\4\5"+
    "\1\0\1\5\1\20\1\21\3\5\1\22\1\23\1\24"+
    "\1\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[55];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\104\0\210\0\104\0\252"+
    "\0\314\0\356\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\104"+
    "\0\u01ba\0\104\0\u01dc\0\104\0\104\0\104\0\104\0\u01fe"+
    "\0\252\0\356\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca"+
    "\0\356\0\u02ec\0\104\0\u030e\0\u0330\0\u0352\0\u0374\0\356"+
    "\0\u0396\0\u03b8\0\u03da\0\u03fc\0\u041e\0\u0440\0\356\0\356"+
    "\0\u0462\0\u0484\0\u04a6\0\356\0\356\0\356\0\356";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[55];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\12\1\14\1\12\1\15\1\12\1\16\4\12"+
    "\1\17\3\12\1\3\1\20\1\21\1\22\1\23\1\3"+
    "\1\24\1\25\1\26\1\27\42\3\44\0\1\5\44\0"+
    "\1\30\34\0\1\31\1\4\1\5\37\31\7\0\1\12"+
    "\1\32\3\12\1\33\16\12\16\0\24\12\16\0\3\12"+
    "\1\34\20\12\16\0\5\12\1\35\1\12\1\36\14\12"+
    "\16\0\3\12\1\37\13\12\1\40\4\12\16\0\11\12"+
    "\1\41\12\12\16\0\4\12\1\42\17\12\40\0\2\21"+
    "\44\0\1\43\4\0\5\44\1\45\34\44\7\0\12\12"+
    "\1\46\11\12\16\0\4\12\1\47\17\12\16\0\10\12"+
    "\1\50\13\12\16\0\14\12\1\51\7\12\16\0\1\52"+
    "\23\12\16\0\1\53\23\12\16\0\16\12\1\54\5\12"+
    "\7\0\5\44\1\55\34\44\4\0\1\5\1\45\43\0"+
    "\13\12\1\56\10\12\16\0\5\12\1\57\16\12\16\0"+
    "\4\12\1\60\17\12\16\0\7\12\1\61\14\12\16\0"+
    "\2\12\1\62\21\12\16\0\1\63\23\12\7\0\4\44"+
    "\1\5\1\55\34\44\7\0\2\12\1\64\21\12\16\0"+
    "\4\12\1\65\17\12\16\0\4\12\1\66\17\12\16\0"+
    "\5\12\1\67\16\12\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1224];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\10\1\1\11"+
    "\1\1\1\11\1\1\4\11\2\0\11\1\1\11\2\0"+
    "\7\1\1\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[55];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  /* can define helper functions here */
  private int sym_if = 0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  mm_lexor(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  mm_lexor(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      System.out.println();

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { System.out.print("THEN "); return 0;
          }
        case 22: break;
        case 11: 
          { System.out.print("SEMICOLON "); return 0;
          }
        case 23: break;
        case 10: 
          { System.out.print("RPAR "); return 0;
          }
        case 24: break;
        case 19: 
          { System.out.print("WHILE "); return 0;
          }
        case 25: break;
        case 9: 
          { System.out.print("LPAR "); return 0;
          }
        case 26: break;
        case 18: 
          { System.out.print("INPUT "); return 0;
          }
        case 27: break;
        case 14: 
          { System.out.print("ASSIGN "); return 0;
          }
        case 28: break;
        case 5: 
          { System.out.print("ID(\""+yytext()+"\")  "); return 0;
          }
        case 29: break;
        case 8: 
          { System.out.print("SUB "); return 0;
          }
        case 30: break;
        case 12: 
          { System.out.print("IF "); return 0;
          }
        case 31: break;
        case 21: 
          { System.out.print("BEGIN "); return 0;
          }
        case 32: break;
        case 1: 
          { System.out.println("Illegal character <"+
                                                    yytext()+">");
          }
        case 33: break;
        case 15: 
          { System.out.print("END "); return 0;
          }
        case 34: break;
        case 4: 
          { System.out.print("MUL "); return 0;
          }
        case 35: break;
        case 17: 
          { System.out.print("ELSE "); return 0;
          }
        case 36: break;
        case 20: 
          { System.out.print("WRITE "); return 0;
          }
        case 37: break;
        case 13: 
          { System.out.print("DO "); return 0;
          }
        case 38: break;
        case 6: 
          { System.out.print("NUM(\""+yytext()+"\") "); return 0;
          }
        case 39: break;
        case 3: 
          { System.out.print("DIV "); return 0;
          }
        case 40: break;
        case 7: 
          { System.out.print("ADD "); return 0;
          }
        case 41: break;
        case 2: 
          { /* ignore */
          }
        case 42: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java mm_lexor <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        mm_lexor scanner = null;
        try {
          scanner = new mm_lexor( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
