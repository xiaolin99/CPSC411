
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 21 17:40:39 MDT 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 21 17:40:39 MDT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\004\005\000\002\004\002\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\006\000" +
    "\002\007\004\000\002\010\005\000\002\010\002\000\002" +
    "\011\004\000\002\012\006\000\002\012\002\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\014\012\000\002\015\004\000" +
    "\002\016\005\000\002\017\004\000\002\017\002\000\002" +
    "\020\005\000\002\020\002\000\002\021\006\000\002\022" +
    "\005\000\002\022\002\000\002\023\006\000\002\024\004" +
    "\000\002\025\005\000\002\025\002\000\002\026\005\000" +
    "\002\026\003\000\002\027\004\000\002\030\005\000\002" +
    "\030\002\000\002\031\005\000\002\031\003\000\002\032" +
    "\010\000\002\032\006\000\002\033\005\000\002\033\002" +
    "\000\002\034\010\000\002\034\006\000\002\034\004\000" +
    "\002\034\005\000\002\034\004\000\002\034\005\000\002" +
    "\034\010\000\002\035\004\000\002\036\004\000\002\037" +
    "\005\000\002\037\002\000\002\040\006\000\002\041\005" +
    "\000\002\041\002\000\002\042\004\000\002\043\005\000" +
    "\002\043\002\000\002\044\005\000\002\044\003\000\002" +
    "\045\005\000\002\045\003\000\002\046\004\000\002\046" +
    "\005\000\002\046\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\050\005\000\002\050\003\000\002\051\003\000\002" +
    "\051\003\000\002\052\005\000\002\052\003\000\002\053" +
    "\003\000\002\053\003\000\002\054\005\000\002\054\007" +
    "\000\002\054\006\000\002\054\006\000\002\054\006\000" +
    "\002\054\004\000\002\054\004\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\004\000\002\055\003\000\002\055\003\000\002\056\005" +
    "\000\002\057\003\000\002\057\002\000\002\060\004\000" +
    "\002\060\002\000\002\061\005\000\002\061\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\032\002\ufffd\024\ufffd\034\ufffd\036\ufffd\040" +
    "\ufffd\042\ufffd\044\ufffd\046\ufffd\053\012\054\010\061\005" +
    "\064\ufffd\001\002\000\004\032\314\001\002\000\004\064" +
    "\255\001\002\000\004\032\ufffa\001\002\000\004\002\000" +
    "\001\002\000\004\064\235\001\002\000\004\002\234\001" +
    "\002\000\004\064\216\001\002\000\004\032\ufffb\001\002" +
    "\000\004\032\ufffc\001\002\000\026\002\uffd5\024\023\025" +
    "\uffd5\034\022\036\017\040\016\042\031\044\027\046\025" +
    "\064\024\001\002\000\004\064\024\001\002\000\034\005" +
    "\045\013\037\022\057\055\054\056\050\057\042\060\043" +
    "\063\046\064\044\065\040\066\056\067\055\070\035\001" +
    "\002\000\006\002\uffff\025\uffff\001\002\000\006\002\uffd9" +
    "\025\uffd9\001\002\000\034\005\045\013\037\022\057\055" +
    "\054\056\050\057\042\060\043\063\046\064\044\065\040" +
    "\066\056\067\055\070\035\001\002\000\032\024\ufffd\025" +
    "\ufffd\034\ufffd\036\ufffd\040\ufffd\042\ufffd\044\ufffd\046\ufffd" +
    "\053\012\054\010\061\005\064\ufffd\001\002\000\016\021" +
    "\ufff3\025\ufff3\026\122\030\ufff3\032\ufff3\041\ufff3\001\002" +
    "\000\034\005\045\013\037\022\057\055\054\056\050\057" +
    "\042\060\043\063\046\064\044\065\040\066\056\067\055" +
    "\070\035\001\002\000\004\032\176\001\002\000\034\005" +
    "\045\013\037\022\057\055\054\056\050\057\042\060\043" +
    "\063\046\064\044\065\040\066\056\067\055\070\035\001" +
    "\002\000\004\021\034\001\002\000\022\024\023\034\022" +
    "\036\017\040\016\043\uffd5\044\027\046\025\064\024\001" +
    "\002\000\004\043\033\001\002\000\006\002\uffda\025\uffda" +
    "\001\002\000\034\005\045\013\037\022\057\055\054\056" +
    "\050\057\042\060\043\063\046\064\044\065\040\066\056" +
    "\067\055\070\035\001\002\000\054\004\uffa5\005\uffa5\006" +
    "\uffa5\007\uffa5\011\uffa5\012\uffa5\014\uffa5\015\uffa5\016\uffa5" +
    "\017\uffa5\020\uffa5\023\uffa5\025\uffa5\027\uffa5\030\uffa5\032" +
    "\uffa5\033\uffa5\035\uffa5\037\uffa5\041\uffa5\045\uffa5\001\002" +
    "\000\014\012\062\025\uffd1\030\uffd1\032\uffd1\041\uffd1\001" +
    "\002\000\034\005\045\013\037\022\057\055\054\056\050" +
    "\057\042\060\043\063\046\064\044\065\040\066\056\067" +
    "\055\070\035\001\002\000\054\004\uffa7\005\uffa7\006\uffa7" +
    "\007\uffa7\011\uffa7\012\uffa7\014\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\023\uffa7\025\uffa7\027\uffa7\030\uffa7\032\uffa7" +
    "\033\uffa7\035\uffa7\037\uffa7\041\uffa7\045\uffa7\001\002\000" +
    "\050\004\137\005\141\011\uffbd\012\uffbd\014\135\015\144" +
    "\016\142\017\140\020\134\023\uffbd\025\uffbd\027\uffbd\030" +
    "\uffbd\032\uffbd\033\uffbd\035\uffbd\037\uffbd\041\uffbd\045\uffbd" +
    "\001\002\000\004\022\131\001\002\000\004\022\126\001" +
    "\002\000\060\004\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3" +
    "\012\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\022" +
    "\105\023\ufff3\025\ufff3\026\122\027\ufff3\030\ufff3\032\ufff3" +
    "\033\ufff3\035\ufff3\037\ufff3\041\ufff3\045\ufff3\001\002\000" +
    "\032\005\045\022\057\055\054\056\050\057\042\060\043" +
    "\063\046\064\044\065\040\066\056\067\055\070\035\001" +
    "\002\000\056\004\uff9f\005\uff9f\006\uff9f\007\uff9f\011\uff9f" +
    "\012\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\022" +
    "\105\023\uff9f\025\uff9f\027\uff9f\030\uff9f\032\uff9f\033\uff9f" +
    "\035\uff9f\037\uff9f\041\uff9f\045\uff9f\001\002\000\032\011" +
    "\064\012\uffc2\023\uffc2\025\uffc2\027\uffc2\030\uffc2\032\uffc2" +
    "\033\uffc2\035\uffc2\037\uffc2\041\uffc2\045\uffc2\001\002\000" +
    "\004\022\101\001\002\000\032\011\uffc0\012\uffc0\023\uffc0" +
    "\025\uffc0\027\uffc0\030\uffc0\032\uffc0\033\uffc0\035\uffc0\037" +
    "\uffc0\041\uffc0\045\uffc0\001\002\000\054\004\uffb2\005\uffb2" +
    "\006\uffb2\007\uffb2\011\uffb2\012\uffb2\014\uffb2\015\uffb2\016" +
    "\uffb2\017\uffb2\020\uffb2\023\uffb2\025\uffb2\027\uffb2\030\uffb2" +
    "\032\uffb2\033\uffb2\035\uffb2\037\uffb2\041\uffb2\045\uffb2\001" +
    "\002\000\054\004\uffb6\005\uffb6\006\076\007\077\011\uffb6" +
    "\012\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\023" +
    "\uffb6\025\uffb6\027\uffb6\030\uffb6\032\uffb6\033\uffb6\035\uffb6" +
    "\037\uffb6\041\uffb6\045\uffb6\001\002\000\004\022\066\001" +
    "\002\000\054\004\uffa6\005\uffa6\006\uffa6\007\uffa6\011\uffa6" +
    "\012\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\023" +
    "\uffa6\025\uffa6\027\uffa6\030\uffa6\032\uffa6\033\uffa6\035\uffa6" +
    "\037\uffa6\041\uffa6\045\uffa6\001\002\000\054\004\uffa8\005" +
    "\uffa8\006\uffa8\007\uffa8\011\uffa8\012\uffa8\014\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\023\uffa8\025\uffa8\027\uffa8\030" +
    "\uffa8\032\uffa8\033\uffa8\035\uffa8\037\uffa8\041\uffa8\045\uffa8" +
    "\001\002\000\034\005\045\013\037\022\057\055\054\056" +
    "\050\057\042\060\043\063\046\064\044\065\040\066\056" +
    "\067\055\070\035\001\002\000\006\012\062\023\061\001" +
    "\002\000\054\004\uffaf\005\uffaf\006\uffaf\007\uffaf\011\uffaf" +
    "\012\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\023" +
    "\uffaf\025\uffaf\027\uffaf\030\uffaf\032\uffaf\033\uffaf\035\uffaf" +
    "\037\uffaf\041\uffaf\045\uffaf\001\002\000\034\005\045\013" +
    "\037\022\057\055\054\056\050\057\042\060\043\063\046" +
    "\064\044\065\040\066\056\067\055\070\035\001\002\000" +
    "\032\011\064\012\uffc3\023\uffc3\025\uffc3\027\uffc3\030\uffc3" +
    "\032\uffc3\033\uffc3\035\uffc3\037\uffc3\041\uffc3\045\uffc3\001" +
    "\002\000\034\005\045\013\037\022\057\055\054\056\050" +
    "\057\042\060\043\063\046\064\044\065\040\066\056\067" +
    "\055\070\035\001\002\000\032\011\uffc1\012\uffc1\023\uffc1" +
    "\025\uffc1\027\uffc1\030\uffc1\032\uffc1\033\uffc1\035\uffc1\037" +
    "\uffc1\041\uffc1\045\uffc1\001\002\000\004\064\067\001\002" +
    "\000\006\023\uffe4\026\070\001\002\000\004\027\073\001" +
    "\002\000\004\023\072\001\002\000\054\004\uffae\005\uffae" +
    "\006\uffae\007\uffae\011\uffae\012\uffae\014\uffae\015\uffae\016" +
    "\uffae\017\uffae\020\uffae\023\uffae\025\uffae\027\uffae\030\uffae" +
    "\032\uffae\033\uffae\035\uffae\037\uffae\041\uffae\045\uffae\001" +
    "\002\000\010\023\uffe4\026\070\031\uffe4\001\002\000\006" +
    "\023\uffe5\031\uffe5\001\002\000\032\005\045\022\057\055" +
    "\054\056\050\057\042\060\043\063\046\064\044\065\040" +
    "\066\056\067\055\070\035\001\002\000\032\005\uffb1\022" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\063\uffb1\064\uffb1" +
    "\065\uffb1\066\uffb1\067\uffb1\070\uffb1\001\002\000\032\005" +
    "\uffb0\022\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\001\002\000" +
    "\054\004\uffb3\005\uffb3\006\uffb3\007\uffb3\011\uffb3\012\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\023\uffb3\025" +
    "\uffb3\027\uffb3\030\uffb3\032\uffb3\033\uffb3\035\uffb3\037\uffb3" +
    "\041\uffb3\045\uffb3\001\002\000\034\005\045\013\037\022" +
    "\057\055\054\056\050\057\042\060\043\063\046\064\044" +
    "\065\040\066\056\067\055\070\035\001\002\000\006\012" +
    "\062\023\103\001\002\000\054\004\uffad\005\uffad\006\uffad" +
    "\007\uffad\011\uffad\012\uffad\014\uffad\015\uffad\016\uffad\017" +
    "\uffad\020\uffad\023\uffad\025\uffad\027\uffad\030\uffad\032\uffad" +
    "\033\uffad\035\uffad\037\uffad\041\uffad\045\uffad\001\002\000" +
    "\054\004\uffa0\005\uffa0\006\uffa0\007\uffa0\011\uffa0\012\uffa0" +
    "\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\023\uffa0\025" +
    "\uffa0\027\uffa0\030\uffa0\032\uffa0\033\uffa0\035\uffa0\037\uffa0" +
    "\041\uffa0\045\uffa0\001\002\000\036\005\045\013\037\022" +
    "\057\023\uff9d\055\054\056\050\057\042\060\043\063\046" +
    "\064\044\065\040\066\056\067\055\070\035\001\002\000" +
    "\054\004\uffa9\005\uffa9\006\uffa9\007\uffa9\011\uffa9\012\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\023\uffa9\025" +
    "\uffa9\027\uffa9\030\uffa9\032\uffa9\033\uffa9\035\uffa9\037\uffa9" +
    "\041\uffa9\045\uffa9\001\002\000\010\012\062\023\uff9b\033" +
    "\113\001\002\000\004\023\111\001\002\000\054\004\uffa1" +
    "\005\uffa1\006\uffa1\007\uffa1\011\uffa1\012\uffa1\014\uffa1\015" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\023\uffa1\025\uffa1\027\uffa1" +
    "\030\uffa1\032\uffa1\033\uffa1\035\uffa1\037\uffa1\041\uffa1\045" +
    "\uffa1\001\002\000\004\023\uff9e\001\002\000\034\005\045" +
    "\013\037\022\057\055\054\056\050\057\042\060\043\063" +
    "\046\064\044\065\040\066\056\067\055\070\035\001\002" +
    "\000\010\012\062\023\uff9b\033\113\001\002\000\004\023" +
    "\uff9c\001\002\000\054\004\uffa4\005\uffa4\006\uffa4\007\uffa4" +
    "\011\uffa4\012\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020" +
    "\uffa4\023\uffa4\025\uffa4\027\uffa4\030\uffa4\032\uffa4\033\uffa4" +
    "\035\uffa4\037\uffa4\041\uffa4\045\uffa4\001\002\000\054\004" +
    "\uffa3\005\uffa3\006\uffa3\007\uffa3\011\uffa3\012\uffa3\014\uffa3" +
    "\015\uffa3\016\uffa3\017\uffa3\020\uffa3\023\uffa3\025\uffa3\027" +
    "\uffa3\030\uffa3\032\uffa3\033\uffa3\035\uffa3\037\uffa3\041\uffa3" +
    "\045\uffa3\001\002\000\054\004\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\011\uffa2\012\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\023\uffa2\025\uffa2\027\uffa2\030\uffa2\032\uffa2\033" +
    "\uffa2\035\uffa2\037\uffa2\041\uffa2\045\uffa2\001\002\000\054" +
    "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\011\uffaa\012\uffaa\014" +
    "\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\023\uffaa\025\uffaa" +
    "\027\uffaa\030\uffaa\032\uffaa\033\uffaa\035\uffaa\037\uffaa\041" +
    "\uffaa\045\uffaa\001\002\000\034\005\045\013\037\022\057" +
    "\055\054\056\050\057\042\060\043\063\046\064\044\065" +
    "\040\066\056\067\055\070\035\001\002\000\006\012\062" +
    "\027\124\001\002\000\062\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\011\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\023\ufff3\025\ufff3\026\122\027\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\033\ufff3\035\ufff3\037\ufff3\041\ufff3" +
    "\045\ufff3\001\002\000\060\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\023\ufff4\025\ufff4\027\ufff4\030\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\035\ufff4\037\ufff4\041\ufff4\045\ufff4" +
    "\001\002\000\034\005\045\013\037\022\057\055\054\056" +
    "\050\057\042\060\043\063\046\064\044\065\040\066\056" +
    "\067\055\070\035\001\002\000\006\012\062\023\130\001" +
    "\002\000\054\004\uffab\005\uffab\006\uffab\007\uffab\011\uffab" +
    "\012\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\023" +
    "\uffab\025\uffab\027\uffab\030\uffab\032\uffab\033\uffab\035\uffab" +
    "\037\uffab\041\uffab\045\uffab\001\002\000\034\005\045\013" +
    "\037\022\057\055\054\056\050\057\042\060\043\063\046" +
    "\064\044\065\040\066\056\067\055\070\035\001\002\000" +
    "\006\012\062\023\133\001\002\000\054\004\uffac\005\uffac" +
    "\006\uffac\007\uffac\011\uffac\012\uffac\014\uffac\015\uffac\016" +
    "\uffac\017\uffac\020\uffac\023\uffac\025\uffac\027\uffac\030\uffac" +
    "\032\uffac\033\uffac\035\uffac\037\uffac\041\uffac\045\uffac\001" +
    "\002\000\032\005\uffb8\022\uffb8\055\uffb8\056\uffb8\057\uffb8" +
    "\060\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070" +
    "\uffb8\001\002\000\032\005\uffbc\022\uffbc\055\uffbc\056\uffbc" +
    "\057\uffbc\060\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067" +
    "\uffbc\070\uffbc\001\002\000\032\005\045\022\057\055\054" +
    "\056\050\057\042\060\043\063\046\064\044\065\040\066" +
    "\056\067\055\070\035\001\002\000\032\005\uffb5\022\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\060\uffb5\063\uffb5\064\uffb5\065" +
    "\uffb5\066\uffb5\067\uffb5\070\uffb5\001\002\000\032\005\uffb9" +
    "\022\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\063\uffb9\064" +
    "\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\001\002\000\032" +
    "\005\uffb4\022\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\063" +
    "\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\001\002" +
    "\000\032\005\uffba\022\uffba\055\uffba\056\uffba\057\uffba\060" +
    "\uffba\063\uffba\064\uffba\065\uffba\066\uffba\067\uffba\070\uffba" +
    "\001\002\000\032\005\045\022\057\055\054\056\050\057" +
    "\042\060\043\063\046\064\044\065\040\066\056\067\055" +
    "\070\035\001\002\000\032\005\uffbb\022\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb" +
    "\067\uffbb\070\uffbb\001\002\000\054\004\uffb7\005\uffb7\006" +
    "\076\007\077\011\uffb7\012\uffb7\014\uffb7\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\023\uffb7\025\uffb7\027\uffb7\030\uffb7\032" +
    "\uffb7\033\uffb7\035\uffb7\037\uffb7\041\uffb7\045\uffb7\001\002" +
    "\000\036\004\137\005\141\011\uffbe\012\uffbe\023\uffbe\025" +
    "\uffbe\027\uffbe\030\uffbe\032\uffbe\033\uffbe\035\uffbe\037\uffbe" +
    "\041\uffbe\045\uffbe\001\002\000\032\011\uffbf\012\uffbf\023" +
    "\uffbf\025\uffbf\027\uffbf\030\uffbf\032\uffbf\033\uffbf\035\uffbf" +
    "\037\uffbf\041\uffbf\045\uffbf\001\002\000\006\012\062\045" +
    "\151\001\002\000\004\024\152\001\002\000\004\063\155" +
    "\001\002\000\006\025\uffca\030\172\001\002\000\004\025" +
    "\171\001\002\000\006\010\uffc7\022\157\001\002\000\004" +
    "\010\167\001\002\000\004\064\160\001\002\000\006\023" +
    "\uffc4\033\163\001\002\000\004\023\162\001\002\000\004" +
    "\010\uffc8\001\002\000\004\064\165\001\002\000\004\023" +
    "\uffc6\001\002\000\006\023\uffc4\033\163\001\002\000\004" +
    "\023\uffc5\001\002\000\020\024\023\034\022\036\017\040" +
    "\016\044\027\046\025\064\024\001\002\000\006\025\uffc9" +
    "\030\uffc9\001\002\000\012\025\uffce\030\uffce\032\uffce\041" +
    "\uffce\001\002\000\004\063\155\001\002\000\004\025\uffcc" +
    "\001\002\000\006\025\uffca\030\172\001\002\000\004\025" +
    "\uffcb\001\002\000\030\002\uffd5\024\023\025\uffd5\034\022" +
    "\036\017\040\016\043\uffd5\044\027\046\025\062\uffd5\064" +
    "\024\001\002\000\012\002\uffd6\025\uffd6\043\uffd6\062\uffd6" +
    "\001\002\000\014\012\062\025\uffd0\030\uffd0\032\uffd0\041" +
    "\uffd0\001\002\000\014\021\uffcd\025\uffcd\030\uffcd\032\uffcd" +
    "\041\uffcd\001\002\000\004\025\203\001\002\000\012\025" +
    "\uffcf\030\uffcf\032\uffcf\041\uffcf\001\002\000\006\012\062" +
    "\035\205\001\002\000\020\024\023\034\022\036\017\040" +
    "\016\044\027\046\025\064\024\001\002\000\004\041\207" +
    "\001\002\000\020\024\023\034\022\036\017\040\016\044" +
    "\027\046\025\064\024\001\002\000\012\025\uffd4\030\uffd4" +
    "\032\uffd4\041\uffd4\001\002\000\006\012\062\037\212\001" +
    "\002\000\020\024\023\034\022\036\017\040\016\044\027" +
    "\046\025\064\024\001\002\000\012\025\uffd3\030\uffd3\032" +
    "\uffd3\041\uffd3\001\002\000\012\025\uffd2\030\uffd2\032\uffd2" +
    "\041\uffd2\001\002\000\004\031\225\001\002\000\010\026" +
    "\122\031\ufff3\033\ufff3\001\002\000\006\031\ufff6\033\220" +
    "\001\002\000\004\064\216\001\002\000\004\031\ufff8\001" +
    "\002\000\006\031\ufff6\033\220\001\002\000\004\031\ufff7" +
    "\001\002\000\006\031\ufff5\033\ufff5\001\002\000\014\047" +
    "\233\050\231\051\232\052\227\064\226\001\002\000\016" +
    "\006\uffee\023\uffee\024\uffee\030\uffee\032\uffee\033\uffee\001" +
    "\002\000\016\006\ufff1\023\ufff1\024\ufff1\030\ufff1\032\ufff1" +
    "\033\ufff1\001\002\000\004\032\ufff9\001\002\000\016\006" +
    "\ufff0\023\ufff0\024\ufff0\030\ufff0\032\ufff0\033\ufff0\001\002" +
    "\000\016\006\uffef\023\uffef\024\uffef\030\uffef\032\uffef\033" +
    "\uffef\001\002\000\016\006\ufff2\023\ufff2\024\ufff2\030\ufff2" +
    "\032\ufff2\033\ufff2\001\002\000\004\002\001\001\002\000" +
    "\004\014\236\001\002\000\004\063\240\001\002\000\004" +
    "\032\uffe3\001\002\000\010\030\uffde\032\uffde\045\246\001" +
    "\002\000\006\030\242\032\uffe0\001\002\000\004\063\240" +
    "\001\002\000\004\032\uffe2\001\002\000\006\030\242\032" +
    "\uffe0\001\002\000\004\032\uffe1\001\002\000\014\047\233" +
    "\050\231\051\232\052\227\064\226\001\002\000\010\006" +
    "\251\030\uffdb\032\uffdb\001\002\000\006\030\uffdf\032\uffdf" +
    "\001\002\000\014\047\233\050\231\051\232\052\227\064" +
    "\226\001\002\000\006\030\uffdd\032\uffdd\001\002\000\010" +
    "\006\251\030\uffdb\032\uffdb\001\002\000\006\030\uffdc\032" +
    "\uffdc\001\002\000\004\022\257\001\002\000\004\031\273" +
    "\001\002\000\006\023\uffe9\064\260\001\002\000\006\026" +
    "\070\031\uffe4\001\002\000\006\023\uffe7\033\264\001\002" +
    "\000\004\023\263\001\002\000\004\031\uffeb\001\002\000" +
    "\004\064\260\001\002\000\004\023\uffea\001\002\000\006" +
    "\023\uffe7\033\264\001\002\000\004\023\uffe8\001\002\000" +
    "\004\031\271\001\002\000\014\047\233\050\231\051\232" +
    "\052\227\064\226\001\002\000\006\023\uffe6\033\uffe6\001" +
    "\002\000\014\047\233\050\231\051\232\052\227\064\226" +
    "\001\002\000\004\024\275\001\002\000\032\024\ufffd\034" +
    "\ufffd\036\ufffd\040\ufffd\042\ufffd\044\ufffd\046\ufffd\053\012" +
    "\054\010\061\005\062\ufffd\064\ufffd\001\002\000\004\025" +
    "\313\001\002\000\024\024\023\034\022\036\017\040\016" +
    "\042\302\044\027\046\025\062\uffd5\064\024\001\002\000" +
    "\004\025\uffec\001\002\000\004\062\310\001\002\000\022" +
    "\024\023\034\022\036\017\040\016\044\027\046\025\062" +
    "\uffd5\064\024\001\002\000\004\062\304\001\002\000\034" +
    "\005\045\013\037\022\057\055\054\056\050\057\042\060" +
    "\043\063\046\064\044\065\040\066\056\067\055\070\035" +
    "\001\002\000\006\012\062\032\306\001\002\000\004\043" +
    "\307\001\002\000\004\025\uffd8\001\002\000\034\005\045" +
    "\013\037\022\057\055\054\056\050\057\042\060\043\063" +
    "\046\064\044\065\040\066\056\067\055\070\035\001\002" +
    "\000\006\012\062\032\312\001\002\000\004\025\uffd7\001" +
    "\002\000\004\032\uffed\001\002\000\036\002\ufffd\024\ufffd" +
    "\025\ufffd\034\ufffd\036\ufffd\040\ufffd\042\ufffd\044\ufffd\046" +
    "\ufffd\053\012\054\010\061\005\062\ufffd\064\ufffd\001\002" +
    "\000\030\002\ufffe\024\ufffe\025\ufffe\034\ufffe\036\ufffe\040" +
    "\ufffe\042\ufffe\044\ufffe\046\ufffe\062\ufffe\064\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\020\002\010\003\006\004\014\005\003\006" +
    "\013\014\012\023\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\214\011\216\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\031\017\033" +
    "\020\034\025\035\027\001\001\000\004\035\213\001\001" +
    "\000\016\044\210\045\046\046\050\050\040\052\052\054" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\044\203\045\046\046\050\050\040\052\052\054\051\001" +
    "\001\000\016\003\201\004\014\005\003\006\013\014\012" +
    "\023\005\001\001\000\004\012\200\001\001\000\016\044" +
    "\177\045\046\046\050\050\040\052\052\054\051\001\001" +
    "\000\002\001\001\000\016\044\147\045\046\046\050\050" +
    "\040\052\052\054\051\001\001\000\002\001\001\000\010" +
    "\033\031\034\025\035\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\044\035\045\046\046\050\050\040" +
    "\052\052\054\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\046\146\050\040\052\052\054\051\001\001" +
    "\000\002\001\001\000\006\047\135\051\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\117\055\120" +
    "\056\116\001\001\000\004\054\115\001\001\000\006\056" +
    "\103\057\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\044\057\045\046\046\050\050\040\052\052\054" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\045\062\046\050\050\040\052\052\054\051\001\001\000" +
    "\002\001\001\000\012\046\064\050\040\052\052\054\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\073\001\001\000\002\001\001\000" +
    "\004\054\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\044\101\045\046\046\050\050" +
    "\040\052\052\054\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\044\106\045\046\046" +
    "\050\050\040\052\052\054\051\060\107\001\001\000\002" +
    "\001\001\000\004\061\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\044\113\045\046" +
    "\046\050\050\040\052\052\054\051\001\001\000\004\061" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\044" +
    "\122\045\046\046\050\050\040\052\052\054\051\001\001" +
    "\000\002\001\001\000\004\012\124\001\001\000\002\001" +
    "\001\000\016\044\126\045\046\046\050\050\040\052\052" +
    "\054\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\044\131\045\046\046\050\050\040\052\052\054\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\050\145\052\052\054\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\052\144\054\051\001\001" +
    "\000\002\001\001\000\004\053\074\001\001\000\004\051" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\036\153\040\152\001\001\000\004\037" +
    "\172\001\001\000\002\001\001\000\004\041\155\001\001" +
    "\000\002\001\001\000\004\042\160\001\001\000\004\043" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\165\001\001\000" +
    "\002\001\001\000\006\034\167\035\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\173\001\001\000" +
    "\002\001\001\000\004\037\174\001\001\000\002\001\001" +
    "\000\010\033\176\034\025\035\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\205\035" +
    "\027\001\001\000\002\001\001\000\006\034\207\035\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\034" +
    "\212\035\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\223\001\001\000\004\010" +
    "\220\001\001\000\004\011\221\001\001\000\002\001\001" +
    "\000\004\010\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\236\026\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\242\001\001\000\004\026\243" +
    "\001\001\000\002\001\001\000\004\025\244\001\001\000" +
    "\002\001\001\000\006\013\246\027\247\001\001\000\004" +
    "\030\251\001\001\000\002\001\001\000\004\013\252\001" +
    "\001\000\002\001\001\000\004\030\253\001\001\000\002" +
    "\001\001\000\004\016\255\001\001\000\002\001\001\000" +
    "\006\017\261\021\260\001\001\000\004\022\267\001\001" +
    "\000\004\020\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\265\001\001\000\002\001\001\000\004" +
    "\020\266\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\271\001\001\000\002\001\001\000\004\013\273" +
    "\001\001\000\002\001\001\000\016\004\276\005\003\006" +
    "\013\014\012\015\275\023\005\001\001\000\002\001\001" +
    "\000\012\032\277\033\300\034\025\035\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\033\302\034\025" +
    "\035\027\001\001\000\002\001\001\000\016\044\304\045" +
    "\046\046\050\050\040\052\052\054\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\044" +
    "\310\045\046\046\050\050\040\052\052\054\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\314\005\003\006\013\014\012\023\005\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public static void main(String[] args) {
    try {
      System.out.println("Parsing ["+args[0]+"]");
      // create a buffering scanner wrapper
      Scanner lexer = new mpp_lexor( new java.io.FileReader(args[0]));
      // start parsing
      parser p = new parser(lexer);
      Node start = (Node) p.parse().value;
      String astString = "";
      astString += start.toString();

      System.out.println(astString);
    }
    catch (Exception e) {
		e.printStackTrace();
    }
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      if (CUP$parser$act_num < 100) {
        return CUP$parser$do_action1(
             CUP$parser$act_num, CUP$parser$parser,CUP$parser$stack,CUP$parser$top);
      }
      else  {
        return CUP$parser$do_action2(
             CUP$parser$act_num, CUP$parser$parser,CUP$parser$stack,CUP$parser$top);
      }
    }


  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action1(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= block 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(b); RESULT.name += "M_prog"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= declarations program_body 
            {
              Node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node d = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(d, p); RESULT.name += "M_block";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declaration SEMICLON declarations 
            {
              Node RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node d1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node d2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(d1, s, d2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= var_declaration 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= fun_declaration 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= data_declaration 
            {
              Node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node d = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_declaration ::= VAR var_specs COLON type 
            {
              Node RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(va, v, c, t);  RESULT.name += "M_var";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_specs ::= var_spec more_var_specs 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(v, mv); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_specs",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // more_var_specs ::= COMMA var_spec more_var_specs 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mv = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(c, v, mv); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_var_specs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // more_var_specs ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_var_specs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_spec ::= ID array_dimensions 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(i, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // array_dimensions ::= SLPAR expr SRPAR array_dimensions 
            {
              Node RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int srleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int srright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ad = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(sl, e, sr, ad); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_dimensions",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // array_dimensions ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_dimensions",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= INT 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= REAL 
            {
              Node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= BOOL 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= CHAR 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fun_declaration ::= FUN ID param_list COLON type CLPAR fun_block CRPAR 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Node pl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int clpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int clpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object clp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node fb = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int crpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int crpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object crp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(f, id, pl, c, t, clp, fb, crp); RESULT.name += "M_fun";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fun_block ::= declarations fun_body 
            {
              Node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node d = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node fb = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(d, fb); RESULT.name += "M_block"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // param_list ::= LPAR parameters RPAR 
            {
              Node RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(lp, p, rp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parameters ::= basic_declaration more_parameters 
            {
              Node RESULT =null;
		int bdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node bd = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(bd, mp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parameters ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // more_parameters ::= COMMA basic_declaration more_parameters 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node bd = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(c, bd, mp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_parameters",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // more_parameters ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_parameters",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // basic_declaration ::= ID basic_array_dimensions COLON type 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int badleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int badright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node bad = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(id, bad, c, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // basic_array_dimensions ::= SLPAR SRPAR basic_array_dimensions 
            {
              Node RESULT =null;
		int slpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object slp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int srpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int srpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object srp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int badleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int badright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node bad = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(slp, srp, bad); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_array_dimensions",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // basic_array_dimensions ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_array_dimensions",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // data_declaration ::= DATA ID EQUAL cons_declarations 
            {
              Node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node cd = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(d, id, eq, cd);  RESULT.name += "M_data";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_declaration",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cons_declarations ::= cons_decl more_cons_decl 
            {
              Node RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node cd = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mcdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mcd = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(cd, mcd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons_declarations",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // more_cons_decl ::= SLASH cons_decl more_cons_decl 
            {
              Node RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node cd = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mcdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mcd = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(sl, cd, mcd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_cons_decl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // more_cons_decl ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_cons_decl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cons_decl ::= CID OF type_list 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(c, of, tl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons_decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cons_decl ::= CID 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons_decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_list ::= type more_type 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(t, mt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // more_type ::= MUL type more_type 
            {
              Node RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(m, t, mt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // more_type ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // program_body ::= BEGIN prog_stmts END 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node ps = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int edleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ed = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(b, ps, ed); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_body",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // program_body ::= prog_stmts 
            {
              Node RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ps = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(ps); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_body",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // fun_body ::= BEGIN prog_stmts RETURN expr SEMICLON END 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node ps = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node ep = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(b, ps, r, ep, s, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_body",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fun_body ::= prog_stmts RETURN expr SEMICLON 
            {
              Node RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node ps = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node ep = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(ps, r, ep, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_body",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // prog_stmts ::= prog_stmt SEMICLON prog_stmts 
            {
              Node RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node ps = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node pss = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(ps, s, pss); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog_stmts",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // prog_stmts ::= 
            {
              Node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog_stmts",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // prog_stmt ::= IF expr THEN prog_stmt ELSE prog_stmt 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node ps = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ps2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ps2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ps2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(i, e, t, ps, es, ps2); RESULT.name += "M_cond"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // prog_stmt ::= WHILE expr DO prog_stmt 
            {
              Node RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node ep = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ps = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(w, ep, d, ps); RESULT.name += "M_while";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // prog_stmt ::= READ location 
            {
              Node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(r, l); RESULT.name += "M_read";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // prog_stmt ::= location ASSIGN expr 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(l, a, e); RESULT.name += "M_ass";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // prog_stmt ::= PRINT expr 
            {
              Node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(p, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // prog_stmt ::= CLPAR block CRPAR 
            {
              Node RESULT =null;
		int clpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int clpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object clp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int crpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int crpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object crp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(clp, b, crp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // prog_stmt ::= CASE expr OF CLPAR case_list CRPAR 
            {
              Node RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node ep = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int clpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int clpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object clp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node cl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int crpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int crpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object crp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(cs, ep, o, clp, cl, crp);  RESULT.name += "M_case"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // location ::= ID array_dimensions 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ad = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(i, ad); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // case_list ::= case more_case 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(c, mc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // more_case ::= SLASH case more_case 
            {
              Node RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(sl, c, mc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_case",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // more_case ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_case",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // case ::= CID var_list ARROW prog_stmt 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ps = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(c, vl, a, ps); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // var_list ::= LPAR var_list1 RPAR 
            {
              Node RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node vl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(lp, vl, rp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // var_list ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // var_list1 ::= ID more_var_list1 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mvlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mvlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mvl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(i, mvl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // more_var_list1 ::= COMMA ID more_var_list1 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mvlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mvlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node mvl = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(c, i, mvl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_var_list1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // more_var_list1 ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_var_list1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr OR bint_term 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int btleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int btright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node bt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(e, o, bt); RESULT.name += "M_expr1";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= bint_term 
            {
              Node RESULT =null;
		int btleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int btright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node bt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(bt);  RESULT.name += "M_expr2";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bint_term ::= bint_term AND bint_factor 
            {
              Node RESULT =null;
		int btleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int btright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node bt = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node bf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(bt, a, bf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bint_term",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bint_term ::= bint_factor 
            {
              Node RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node bf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(bf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bint_term",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bint_factor ::= NOT bint_factor 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node bf = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(n, bf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bint_factor",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bint_factor ::= int_expr compare_op int_expr 
            {
              Node RESULT =null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node ie = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node co = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ie2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ie2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ie2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(ie, co, ie2); RESULT.name += "M_app"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bint_factor",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // bint_factor ::= int_expr 
            {
              Node RESULT =null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ie = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(ie); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bint_factor",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // compare_op ::= EQUAL 
            {
              Node RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(eq); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compare_op",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // compare_op ::= LT 
            {
              Node RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(lt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compare_op",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // compare_op ::= GT 
            {
              Node RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(gt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compare_op",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // compare_op ::= LE 
            {
              Node RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(le); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compare_op",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // compare_op ::= GE 
            {
              Node RESULT =null;
		int geleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int geright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ge = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(ge); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compare_op",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // int_expr ::= int_expr addop int_term 
            {
              Node RESULT =null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node ie = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node it = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(ie, a, it);  RESULT.name += "M_app"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // int_expr ::= int_term 
            {
              Node RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node it = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(it); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // addop ::= ADD 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // addop ::= SUB 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // int_term ::= int_term mulop int_factor 
            {
              Node RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node it = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node m = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(it, m, f); RESULT.name += "M_app"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_term",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // int_term ::= int_factor 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_term",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // mulop ::= MUL 
            {
              Node RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // mulop ::= DIV 
            {
              Node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // int_factor ::= LPAR expr RPAR 
            {
              Node RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(lp, e, rp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_factor",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // int_factor ::= SIZE LPAR ID basic_array_dimensions RPAR 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int badleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int badright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node bad = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(lp, i, bad, rp);  RESULT.name += "M_size"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_factor",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // int_factor ::= FLOAT LPAR expr RPAR 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(f, lp, e, rp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_factor",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // int_factor ::= FLOOR LPAR expr RPAR 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(f, lp, e, rp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_factor",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // int_factor ::= CEIL LPAR expr RPAR 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(c, lp, e, rp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_factor",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // int_factor ::= ID modifier_list 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ml = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(i, ml);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_factor",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // int_factor ::= CID cons_argument_list 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int calleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int calright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node cal = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(c, cal); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_factor",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // int_factor ::= IVAL 
            {
              Node RESULT =null;
		int IVALleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int IVALright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object IVAL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(IVAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_factor",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // int_factor ::= RVAL 
            {
              Node RESULT =null;
		int RVALleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int RVALright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object RVAL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(RVAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_factor",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // int_factor ::= BVAL 
            {
              Node RESULT =null;
		int BVALleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int BVALright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object BVAL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(BVAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_factor",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // int_factor ::= CVAL 
            {
              Node RESULT =null;
		int CVALleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int CVALright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object CVAL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(CVAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_factor",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // int_factor ::= SUB int_factor 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node i = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(s, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_factor",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // modifier_list ::= fun_argument_list 
            {
              Node RESULT =null;
		int falleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int falright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node fal = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(fal); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modifier_list",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // modifier_list ::= array_dimensions 
            {
              Node RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ad = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(ad); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modifier_list",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // fun_argument_list ::= LPAR arguments RPAR 
            {
              Node RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(lp, a, rp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_argument_list",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cons_argument_list ::= fun_argument_list 
            {
              Node RESULT =null;
		int falleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int falright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node fal = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(fal); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons_argument_list",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cons_argument_list ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons_argument_list",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // arguments ::= expr more_arguments 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ma = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(e, ma); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action2(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // arguments ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // more_arguments ::= COMMA expr more_arguments 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ma = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Node(c, e, ma); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_arguments",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // more_arguments ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_arguments",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

